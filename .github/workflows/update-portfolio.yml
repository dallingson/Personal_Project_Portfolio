name: Update Portfolio

on:
  push:
    branches: [main]
  pull_request:
    types: [closed]
    branches: [main]
  workflow_dispatch:

jobs:
  update-portfolio:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Extract project from PR
        if: github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'new-project')
        run: |
          # Extract project info from PR body
          echo '${{ github.event.pull_request.body }}' > pr_body.txt
          
      - name: Generate project pages
        run: |
          node -e "
          const fs = require('fs');
          let projects = [];
          
          // Load existing projects
          if (fs.existsSync('projects.json')) {
            projects = JSON.parse(fs.readFileSync('projects.json', 'utf8'));
          }
          
          // Add new project from PR if merged
          if (process.env.GITHUB_EVENT_NAME === 'pull_request' && fs.existsSync('pr_body.txt')) {
            const prBody = fs.readFileSync('pr_body.txt', 'utf8');
            const idMatch = prBody.match(/\*\*Project ID:\*\*\s*(.+)/i);
            const titleMatch = prBody.match(/\*\*Project Title:\*\*\s*(.+)/i);
            const descMatch = prBody.match(/\*\*Description:\*\*\s*(.+)/i);
            const imageMatch = prBody.match(/\*\*Image:\*\*\s*(.+)/i);
            const urlMatch = prBody.match(/\*\*External URL:\*\*\s*(.+)/i);
            const detailsMatch = prBody.match(/\*\*Detailed Description:\*\*\s*([\s\S]*?)(?=\n---|$)/i);
            
            if (idMatch && titleMatch && descMatch && imageMatch && urlMatch && detailsMatch) {
              const newProject = {
                id: idMatch[1].trim(),
                title: titleMatch[1].trim(),
                description: descMatch[1].trim(),
                image: imageMatch[1].trim(),
                url: urlMatch[1].trim(),
                details: detailsMatch[1].trim()
              };
              
              // Check if project already exists
              if (!projects.find(p => p.id === newProject.id)) {
                projects.push(newProject);
                fs.writeFileSync('projects.json', JSON.stringify(projects, null, 2));
              }
            }
          }
          
          // Update index.html gallery section
          let indexHtml = fs.readFileSync('index.html', 'utf8');
          const galleryItems = projects.map(p => 
            \`            <a href=\"\${p.id}.html\" class=\"project-card\" aria-label=\"View \${p.title} details\">
                <img src=\"\${p.image}\" alt=\"Screenshot of \${p.title} web application\">
                <div class=\"project-info\">
                    <h3>\${p.title}</h3>
                    <p>\${p.description}</p>
                </div>
            </a>\`
          ).join('\n\n');
          
          indexHtml = indexHtml.replace(
            /<section class=\"gallery\">[\s\S]*?<\/section>/,
            \`<section class=\"gallery\">\n\${galleryItems}\n        </section>\`
          );
          fs.writeFileSync('index.html', indexHtml);
          
          // Generate individual project pages
          projects.forEach(project => {
            const html = \`<!DOCTYPE html>
<html lang=\"en\">
<head>
    <meta charset=\"UTF-8\">
    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">
    <title>\${project.title} - My Portfolio</title>
    <meta name=\"description\" content=\"Detailed information about \${project.title} - web development project\">
    <link rel=\"stylesheet\" href=\"styles.css\">
</head>
<body>
    <header>
        <h1>\${project.title}</h1>
    </header>

    <div class=\"container\">
        <a href=\"index.html\" class=\"back-link\" aria-label=\"Back to main portfolio page\">‚Üê Back to Portfolio</a>
        
        <div class=\"project-detail\">
            <img src=\"\${project.image}\" alt=\"Detailed screenshot of \${project.title} web application interface\" style=\"width: 100%; max-width: 600px; height: 300px; object-fit: cover; border-radius: 10px; margin-bottom: 1rem;\">
            <h2>\${project.title}</h2>
            <p>\${project.details}</p>
            <p><strong>External Link:</strong> <a href=\"\${project.url}\" target=\"_blank\">View Project</a></p>
        </div>
    </div>
    
    <footer>
        <p>Connect with me on <a href=\"https://linkedin.com/in/your-profile\" target=\"_blank\">LinkedIn</a></p>
    </footer>
</body>
</html>\`;
            fs.writeFileSync(\`\${project.id}.html\`, html);
          });
          "
          
      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git diff --staged --quiet || git commit -m "Auto-update portfolio pages from PR merge"
          git push